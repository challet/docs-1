openapi: 3.0.3
info:
  title: Tableland Validator - OpenAPI 3.0
  description: |-
    In Tableland, Validators are the execution unit/actors of the protocol.
    They have the following responsibilities:
    - Listen to on-chain events to materialize Tableland-compliant SQL queries in a database engine (currently, SQLite by default).
    - Serve read-queries (e.g: SELECT * FROM foo_69_1) to the external world.
    - Serve state queries (e.g. list tables, get receipts, etc) to the external world.

    In the 1.0.0 release of the Tableland Validator API, we've switched to a design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  termsOfService: http://docs.tableland.xyz
  contact:
    name: core devs
    email: carson@textile.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Tableland docs
  url: http://docs.tableland.xyz
servers:
  - url: https://testnets.tableland.network/api/v1
  - url: http://localhost:8080/api/v1
tags:
  - name: query
    description: Query the Tableland network
    externalDocs:
      description: Find out more about queries
      url: http://docs.tableland.xyz
  - name: receipt
    description: Get information about transaction progress
    externalDocs:
      description: Find out more about receipts
      url: http://docs.tableland.xyz
  - name: tables
    description: Access to table information
    externalDocs:
      description: Find out more about tables
      url: http://docs.tableland.xyz
paths:
  /health:
    get:
      tags:
        - health
      summary: Get health status
      description: Returns OK if the validator considers itself healthy.
      operationId: health
      responses:
        "200":
          description: The validator is healthy.
  /version:
    get:
      tags:
        - version
      summary: Get version information
      description: Returns version information about the validator daemon.
      operationId: version
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionInfo"
  /query:
    get:
      tags:
        - query
      summary: Query the network
      description: Returns the results of a SQL read query against the Tabeland network
      operationId: queryByStatement
      parameters:
        - name: statement
          in: query
          description: The SQL read query statement
          required: true
          schema:
            type: string
          example: select * from healthbot_80001_1
        - name: format
          in: query
          description: >
            The requested response format:
             * `objects` - Returns the query results as a JSON array of JSON objects.
             * `table` - Return the query results as a JSON object with columns and rows properties.
          required: false
          schema:
            type: string
            enum:
              - objects
              - table
            default: "objects"
        - name: extract
          in: query
          description: Whether to extract the JSON object from the single property of the surrounding JSON object.
          required: false
          schema:
            type: boolean
            default: false
        - name: unwrap
          in: query
          description: Whether to unwrap the returned JSON objects from their surrounding array.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid query/statement value
        "404":
          description: Row Not Found
        "429":
          description: Too Many Requests
  /proof/{chainId}/{tableId}/{row}:
    get:
      tags:
        - proof
      summary: Get inclusion proof of a row
      description: Returns the inclusion proof of a given row
      operationId: queryProof
      parameters:
        - name: chainId
          in: path
          description: The parent chain to target
          required: true
          schema:
            type: integer
            format: int32
          example: 80001
        - name: tableId
          in: path
          description: Table identifier
          required: true
          schema:
            type: string
          example: "1"
        - name: row
          in: path
          description: Row content
          required: true
          schema:
            type: string
          example: "15c1fbab80565e5696b04d9e4fb0ca493106f60d942ec5cd7f40179b20a60e6418d98bf6735243590e6c911b91b324cd3c3b755616021630c836632ea"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Proof"
        "400":
          description: Invalid query/statement value
        "404":
          description: Proof Not Found
        "429":
          description: Too Many Requests
  /receipt/{chainId}/{transactionHash}:
    get:
      tags:
        - receipt
      summary: Get transaction status
      description: Returns the status of a given transaction receipt by hash
      operationId: receiptByTransactionHash
      parameters:
        - name: chainId
          in: path
          description: The parent chain to target
          required: true
          schema:
            type: integer
            format: int32
          example: 80001
        - name: transactionHash
          in: path
          description: The transaction hash to request
          required: true
          schema:
            type: string
          example: "0x02f319429b8a7be1cbb492f0bfbf740d2472232a2edadde7df7c16c0b61aa78b"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionReceipt"
        "400":
          description: Invalid chain identifier or transaction hash format
        "404":
          description: No transaction receipt found with the provided hash
        "429":
          description: Too Many Requests
  /tables/{chainId}/{tableId}:
    get:
      tags:
        - tables
      summary: Get table information
      description: Returns information about a single table, including schema information
      operationId: getTableById
      parameters:
        - name: chainId
          in: path
          description: The parent chain to target
          required: true
          schema:
            type: integer
            format: int32
          example: 80001
        - name: tableId
          in: path
          description: Table identifier
          required: true
          schema:
            type: string
          example: "1"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        "400":
          description: Invalid chain or table identifier
        "404":
          description: Table Not Found
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
components:
  schemas:
    Table:
      type: object
      properties:
        name:
          type: string
          example: healthbot_5_1
        external_url:
          type: string
          example: https://testnet.tableland.network/tables/healthbot_5_1
        animation_url:
          type: string
          example: https://render.tableland.xyz/anim/?chain=1&id=1
        image:
          type: string
          example: https://render.tableland.xyz/healthbot_5_1
        attributes:
          type: array
          items:
            type: "object"
            properties:
              display_type:
                type: "string"
                description: "The display type for marketplaces"
              trait_type:
                type: "string"
                description: "The trait type for marketplaces"
              value:
                description: "The value of the property"
                type: object
                oneOf:
                  - type: string
                  - type: number
                  - type: integer
                  - type: boolean
                  - type: object
          example:
            {
              "display_type": "date",
              "trait_type": "created",
              "value": 1657113720,
            }
        schema:
          $ref: "#/components/schemas/Schema"
    TransactionReceipt:
      type: object
      properties:
        table_id:
          type: string
          example: "1"
        transaction_hash:
          type: string
          example: "0x02f319429b8a7be1cbb492f0bfbf740d2472232a2edadde7df7c16c0b61aa78b"
        block_number:
          type: integer
          format: int64
          example: 27055540
        chain_id:
          type: integer
          format: int32
          example: 80001
        error:
          type: string
          example: "The query statement is invalid"
        error_event_idx:
          type: integer
          format: int32
          example: 1
    Proof:
      type: object
      properties:
        proof:
          type: array
          items:
            type: string
    Schema:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        table_constraints:
          type: array
          items:
            type: string
          example: ["PRIMARY KEY (id)"]
    Column:
      type: object
      properties:
        name:
          type: string
          example: "id"
        type:
          type: string
          example: "integer"
        constraints:
          type: array
          items:
            type: string
          example: ["NOT NULL", "PRIMARY KEY", "UNIQUE"]
    VersionInfo:
      type: object
      properties:
        version:
          type: integer
          format: int32
          example: 0
        git_commit:
          type: string
          example: "79688910d4689dcc0991a0d8eb9d988200586d8f"
        git_branch:
          type: string
          example: "foo/experimentalfeature"
        git_state:
          type: string
          example: "dirty"
        git_summary:
          type: string
          example: "v1.2.3_dirty"
        build_date:
          type: string
          example: "2022-11-29T16:28:04Z"
        binary_version:
          type: string
          example: "v1.0.1"
